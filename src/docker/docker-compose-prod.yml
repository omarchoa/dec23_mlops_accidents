services:

  # database microservice
  database:
    pull_policy: always ## always pull the image from Docker Hub
    image: ${DOCKER_HUB_REPO}:database
    container_name: database
    volumes:
      - type: bind
        source: ~/mariadb_data
        target: /var/lib/mysql
    networks:
      - shield

  # api gateway
  gateway:
    depends_on:
      training:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:gateway
    container_name: gateway
    networks:
      - shield
    volumes:
      - type: bind
        source: ~/logs
        target: /logs

  # users microservice
  users:
    depends_on:
      database:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:users
    container_name: users
    networks:
      - shield

  # data-download-prep microservice
  data-download-prep:
    depends_on:
      users:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:data-download-prep
    container_name: data-download-prep
    networks:
      - shield
    volumes:
      - type: volume
        source: data-download-prep
        target: /home/shield/data-download-prep
      - type: volume
        source: logs
        target: /home/shield/logs

  # training microservice
  training:
    depends_on:
      data-download-prep:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:training
    container_name: training
    networks:
      - shield
    volumes:
      - type: volume
        source: data-download-prep
        target: /home/shield/data-download-prep
        read_only: true
      - type: volume
        source: logs
        target: /home/shield/logs
      - type: volume
        source: models
        target: /home/shield/models

  # prediction microservice
  prediction:
    depends_on:
      gateway:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:prediction
    container_name: prediction
    networks:
      - shield
    volumes:
      - type: volume
        source: data-download-prep
        target: /home/shield/data-download-prep
        read_only: true
      - type: volume
        source: logs
        target: /home/shield/logs
      - type: volume
        source: models
        target: /home/shield/models
        read_only: true

  # scoring microservice
  scoring:
    depends_on:
      gateway:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:scoring
    container_name: scoring
    networks:
      - shield
    volumes:
      - type: volume
        source: data-download-prep
        target: /home/shield/data-download-prep
        read_only: true
      - type: volume
        source: logs
        target: /home/shield/logs
      - type: volume
        source: models
        target: /home/shield/models
        read_only: true

  # testing microservice
  testing:
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:testing
    container_name: testing
    networks:
      - shield
    volumes:
      - type: volume
        source: logs
        target: /home/shield/logs
        read_only: true

# initialization microservice
  initialization:
    depends_on:
      gateway:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:initialization
    container_name: initialization
    networks:
      - shield
    volumes:
      - type: volume
        source: data-download-prep
        target: /home/shield/data-download-prep
      - type: volume
        source: logs
        target: /home/shield/logs
      - type: volume
        source: models
        target: /home/shield/models

  # frontend app
  frontend:
    depends_on:
      gateway:
        condition: service_started
    pull_policy: always
    image: ${DOCKER_HUB_REPO}:frontend
    container_name: frontend
    networks:
      - shield
    volumes:
      - type: volume
        source: logs
        target: /home/shield/logs
        read_only: true
      - type: bind
        source: ~/logs
        target: /home/shield/logs_gateway
        read_only: true
    ports:
        - target: 8501
          published: "8501"


# network declarations
networks:
  shield:
    name: shield ## create network with this specific name


# volume declarations
volumes:
  data-download-prep:
    name: data-download-prep ## create volume with this specific name
  logs:
    name: logs
  models:
    name: models
