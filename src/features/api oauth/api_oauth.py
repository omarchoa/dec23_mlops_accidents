from datetime import datetime, timedelta, timezone
from typing import Union, Optional

from fastapi import Depends, FastAPI, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel

import pandas as pd
import json
import random
import joblib

# ---------------------------- HTTP Exceptions --------------------------------
responses = {
    200: {"description": "OK"},
    401: {"description": "Identifiant ou mot de passe invalide(s)"}
}

# ---------------------------- Configuration pour les tokens ------------------
SECRET_KEY = "shield_secret"  # pour la signature des tokens
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# ---------------------------- Chargement base de donn√©es users ---------------
file = open("users.json", 'r')
users_db = json.load(file)


# ---------------------------- Partie provenant de la doc FastAPI -------------
# https://fastapi.tiangolo.com/tutorial/security/

# Define a Pydantic Model that will be used in the token endpoint for the response:
class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Union[str, None] = None


class User(BaseModel):
    username: str
    password: str
    hashed_password: str
    rights: Optional[int] = 0
    # email: Union[str, None] = None
    # full_name: Union[str, None] = None
    disabled: Optional[bool] = False


class UserInDB(User):
    hashed_password: str


# Pour encoder les mots de passe:
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Envoie le token sur l'endpoint /token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


# Create a utility function to hash a password coming from the user:
def get_password_hash(password):
    return pwd_context.hash(password)


# And another utility to verify if a received password matches the hash stored:
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)


# And another one to authenticate and return a user.
def authenticate_user(fake_db, username: str, password: str):
    user = get_user(fake_db, username)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user


def get_user(db, username: str):
    if username in db:
        user_dict = db[username]
        return UserInDB(**user_dict)


# Create a utility function to generate a new access token:
def create_access_token(data: dict,
                        expires_delta: Union[timedelta, None] = None):

    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


# Update get_current_user to receive the same token as before,
# but this time, using JWT tokens.
# Decode the received token, verify it, and return the current user.
# If the token is invalid, return an HTTP error right away.
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(users_db, username=token_data.username)
    if user is None:
        raise credentials_exception
    return user


async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


# ---------------------------- API --------------------------------------------
api = FastAPI(
    title="üõ°Ô∏è SHIELD",
    description="API permettant l'utilisation de l'application SHIELD (Safety \
                 Hazard Identification and Emergency Law Deployment) utilis√©e \
                 par les forces de l'ordre pour pr√©dire la priorit√© \
                 d'intervention en cas d'un accident de la route.",
    version="0.1",
    openapi_tags=[
        {'name': 'USERS',
         'description': 'Gestion des utilisateurs'},
        {'name': 'PREDICTIONS',
         'description': 'Pr√©dictions faites par le mod√®le.'},
        {'name': 'UPDATE',
         'description': 'Mises √† jour du mod√®le et des donn√©es'},
        {'name': 'TOKENS',
         'description': 'Endpoint de v√©rification'}
        ])


# Create a timedelta with the expiration time of the token.
# Create a real JWT access token and return it
@api.post("/token", tags=['TOKENS'])
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends()
) -> Token:
    user = authenticate_user(users_db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return Token(access_token=access_token, token_type="bearer")


# DONE 1. / : v√©rification du fonctionnement de l‚ÄôAPI
# DONE 2. /register : inscription de l‚Äôutilisateur.
# DONE 3. /remove_user : suppression d'un utilisateur.
#    /login : identification de l‚Äôutilisateur.
#             -> inutile? cela se fait via la requ√™te non?
# DONE 4. /predict_from_test : pr√©diction de la priorit√© de l'intervention
# √† partir d'√©chantillon issu de X_test
# DONE 5. /predict_from_call : pr√©diction de la priorit√© de l'intervention
# √† partir d'entr√©e manuelle
# 6. /train : entra√Æner le mod√®le avec de nouvelles donn√©es.
# 7. /update_data : mettre √† jour la base de donn√©es avec de nouvelles donn√©es
#                   sur les accidents.


# ---------- 1. V√©rification du fonctionnement de l‚ÄôAPI: ----------------------


@api.get('/status', name="test de fonctionnement de l'API", tags=['GET'])
async def is_fonctionnal():
    """
    V√©rifie que l'api fonctionne.
    """
    return {"L'api fonctionne."}


# ---------- 2. Inscription d'un utilisateur: ---------------------------------


@api.post('/register',
          name="Ajout d'un nouvel utilisateur",
          tags=['USERS'], responses=responses)
async def post_user(new_user: User, current_user: User = Depends(get_current_active_user)):
    """Fonction pour ajouter un nouvel utilisateur.
       Il faut √™tre administrateur pour pouvoir ajouter un nouvel utilisateur.
       Identification: entrez votre identifiant et votre mot de passe
       au format identifiant:mot_de_passe
    """

    # Test d'autorisation:
    if current_user.rights == 1:

        # Hashage du mot de passe fourni lors de l'inscription:
        h = pwd_context.hash(new_user.password)

        # Enregistrement du nouvel utilisateur:
        users_db[new_user.username] = {
            "username": new_user.username,
            "password": new_user.password,
            "hashed_password": h,
            "rights": new_user.rights,
            "disabled": new_user.disabled
        }
        update_users_db = json.dumps(users_db, indent=4)
        with open("users.json", "w") as outfile:
            outfile.write(update_users_db)

    else:
        raise HTTPException(
                status_code=403,
                detail="Vous n'avez pas les droits d'administrateur.")


# ---------- 3. Suppresion d'un utilisateur: ----------------------------------


class OldUser(BaseModel):
    user: str


@api.delete('/remove_user',
            name="Suppression d'un utilisateur existant.",
            tags=['USERS'], responses=responses)
async def remove_user(old_user: OldUser, current_user: User = Depends(get_current_active_user)):
    """Fonction pour supprimer un nouvel utilisateur.
       Il faut √™tre administrateur pour pouvoir supprimer
       un nouvel utilisateur.
       Identification: entrez votre identifiant et votre mot de passe
       au format identifiant:mot_de_passe
    """

    # Test d'autorisation:
    if current_user.rights == 1:

        # Test d'identification:
        # if users_passwords_db[user][0] == psw:

        # Suppression de l'ancien utilisateur:
        try:
            users_db.pop(old_user.user)
            update_users_db = json.dumps(users_db, indent=4)
            with open("users.json", "w") as outfile:
                outfile.write(update_users_db)
        except KeyError:
            return "L'utilisateur sp√©cifi√© n'existe pas."

    else:
        raise HTTPException(
                status_code=403,
                detail="Vous n'avez pas les droits d'administrateur.")


# ---------- 4. Pr√©dictions de priorit√© √† partir des donn√©es test: ------------

@api.get('/predict_from_test',
         name="Effectue une prediction √† partir d'un √©chantillon test.",
         tags=['PREDICTIONS'],
         responses=responses)
async def get_pred_from_test(current_user: User = Depends(get_current_active_user)):
    """Fonction pour effectuer une pr√©diction √† partir d'une donn√©e
        issue de l'√©chantillon de test.
        Identification: entrez votre identifiant et votre mot de passe
        au format identifiant:mot_de_passe
    """

    # Chargement du mod√®le:
    rdf = joblib.load("../../models/trained_model.joblib")

    # Chargement des donn√©es test:
    X_test = pd.read_csv("../../../data/preprocessed/X_test.csv")

    # Pr√©diction d'une donn√©e al√©atoire:
    i = random.choice(X_test.index)
    pred = rdf.predict(X_test.iloc[[i]])

    # R√©ponse:
    priority = pred[0]
    if priority == 1:
        return "L'intervention est prioritaire."
    else:
        return "L'intervention n'est pas prioritaire."


# ---------- 5. Pr√©dictions de priorit√© √† partir de donn√©es saisies: ----------


class InputData(BaseModel):
    place: Optional[int] = 10
    catu: Optional[int] = 3
    sexe: Optional[int] = 1
    secu1: Optional[float] = 0.0
    year_acc: Optional[int] = 2021
    victim_age: Optional[int] = 60
    catv: Optional[int] = 2
    obsm: Optional[int] = 1
    motor: Optional[int] = 1
    catr: Optional[int] = 3
    circ: Optional[int] = 2
    surf: Optional[int] = 1
    situ: Optional[int] = 1
    vma: Optional[int] = 50
    jour: Optional[int] = 7
    mois: Optional[int] = 12
    lum: Optional[int] = 5
    dep: Optional[int] = 77
    com: Optional[int] = 77317
    agg_: Optional[int] = 2

# variable d'origine 'int' renomm√©e ici en 'inter' (pour 'intersection')
# pour √©viter les conflits avec le type 'int'.
    inter: Optional[int] = 1
    atm: Optional[int] = 0
    col: Optional[int] = 6
    lat: Optional[float] = 48.60
    long: Optional[float] = 2.89
    hour: Optional[int] = 17
    nb_victim: Optional[int] = 2
    nb_vehicules: Optional[int] = 1


@api.post('/predict_from_call',
          name="Effectue une prediction √† partir de saisie op√©rateur.",
          tags=['PREDICTIONS'],
          responses=responses)
async def post_pred_from_call(data: InputData, current_user: User = Depends(get_current_active_user)):
    """Fonction pour effectuer une pr√©diction √† partir d'une saisie effectu√©e
       par un agent des FdO.
       Identification: entrez votre identifiant et votre mot de passe
       au format identifiant:mot_de_passe
    """

    # Chargement du mod√®le:
    rdf = joblib.load("../../models/trained_model.joblib")

    # Chargement des donn√©es test:
    test = pd.DataFrame.from_dict(dict(data), orient='index').T
    test.rename(columns={"inter": "int"}, inplace=True)

    # Pr√©diction :
    pred = rdf.predict(test)

    # R√©ponse:
    priority = pred[0]
    if priority == 1:
        return "L'intervention est prioritaire."
    else:
        return "L'intervention n'est pas prioritaire."

# ---------- 6. Entra√Æner le mod√®le avec de nouvelles donn√©es: ----------------


@api.get('/train',
         name='Entrainement du mod√®le',
         tags=['UPDATE'])
async def get_train(current_user: User = Depends(get_current_active_user)):
    """Fonction pour entrainer le mod√®le.
    """
    # Test d'autorisation:
    if current_user.rights == 1:
        return "Entrainement"
    else:
        raise HTTPException(
                status_code=403,
                detail="Vous n'avez pas les droits d'administrateur.")

# ---------- 7. Mise √† jour de la base de donn√©es -----------------------------


@api.get('/update_data',
         name='Mise √† jour des donn√©es accidents',
         tags=['UPDATE'])
async def get_update_data(current_user: User = Depends(get_current_active_user)):
    """Fonction pour mettre √† jour les donn√©es accidents.
    """
    # Test d'autorisation:
    if current_user.rights == 1:
        return "Mise √† jour donn√©es accidents"
    else:
        raise HTTPException(
                status_code=403,
                detail="Vous n'avez pas les droits d'administrateur.")
